name: Build for Windows

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  program_name: game2anki

jobs:
  build:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build for target
        shell: bash
        run: |
          arch=${{ matrix.arch }}
          program_name=${{ env.program_name }}

          # 设置目标架构
          if [ "$arch" == "amd64" ]; then
            target=x86_64-pc-windows-msvc
          elif [ "$arch" == "arm64" ]; then
            target=aarch64-pc-windows-msvc
          fi

          echo "构建目标: $target"
          rustup target add $target
          cargo build --release --target=$target

      - name: Create distribution directory
        shell: bash
        run: |
          arch=${{ matrix.arch }}
          program_name=${{ env.program_name }}

          # 设置目标架构
          if [ "$arch" == "amd64" ]; then
            target=x86_64-pc-windows-msvc
          elif [ "$arch" == "arm64" ]; then
            target=aarch64-pc-windows-msvc
          fi

          # 创建分发目录
          mkdir -p dist/$program_name_windows_$arch

          # 复制主程序
          cp target/$target/release/$program_name.exe dist/$program_name_windows_$arch/

      - name: Extract DLL dependencies
        shell: powershell
        run: |
          $arch = "${{ matrix.arch }}"
          $program_name = "${{ env.program_name }}"

          # 设置目标架构
          if ($arch -eq "amd64") {
            $target = "x86_64-pc-windows-msvc"
          } elseif ($arch -eq "arm64") {
            $target = "aarch64-pc-windows-msvc"
          }

          $exe_path = "target\$target\release\$program_name.exe"
          $dist_dir = "dist\${program_name}_windows_$arch"

          # 使用ldd等效工具查找DLL依赖 (在Windows上使用dumpbin或其他工具)
          # 这里使用PowerShell的方式来获取DLL依赖

          # 获取系统DLL路径
          $system_paths = @(
            "$env:SystemRoot\System32",
            "$env:SystemRoot\SysWOW64"
          )

          # 使用dumpbin查找依赖 (如果Visual Studio已安装)
          try {
            $dumpbin_output = & "dumpbin.exe" /dependents $exe_path 2>$null
            if ($dumpbin_output) {
              Write-Host "找到的DLL依赖:"
              $dumpbin_output | Select-String "\.dll" | ForEach-Object {
                $dll_name = $_.Line.Trim()
                Write-Host "  $dll_name"
                
                # 查找DLL文件
                foreach ($path in $system_paths) {
                  $dll_path = Join-Path $path $dll_name
                  if (Test-Path $dll_path) {
                    Write-Host "    复制 $dll_path 到 $dist_dir"
                    Copy-Item $dll_path $dist_dir -ErrorAction SilentlyContinue
                    break
                  }
                }
              }
            }
          } catch {
            Write-Host "无法使用dumpbin，尝试其他方法"
          }

          # 备用方法：手动复制常见的运行时DLL
          $common_dlls = @(
            "vcruntime140.dll",
            "msvcp140.dll",
            "vcruntime140_1.dll",
            "msvcp140_1.dll",
            "msvcp140_2.dll",
            "concrt140.dll"
          )

          foreach ($dll in $common_dlls) {
            foreach ($path in $system_paths) {
              $dll_path = Join-Path $path $dll
              if (Test-Path $dll_path) {
                Write-Host "复制常见运行时DLL: $dll"
                Copy-Item $dll_path $dist_dir -ErrorAction SilentlyContinue
                break
              }
            }
          }

      - name: List distribution contents
        shell: bash
        run: |
          arch=${{ matrix.arch }}
          program_name=${{ env.program_name }}
          echo "分发目录内容:"
          ls -la dist/${program_name}_windows_$arch/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.program_name }}_windows_${{ matrix.arch }}
          path: dist/${{ env.program_name }}_windows_${{ matrix.arch }}/
